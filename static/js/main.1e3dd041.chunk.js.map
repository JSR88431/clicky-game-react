{"version":3,"sources":["components/Top.js","components/Pictures.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Top","props","react_default","a","createElement","className","message","score","highscore","Pictures","onClick","carPicker","name","alt","src","image","Wrapper","children","App","state","cars","notPicked","imageShuffle","item","x","length","y","Math","floor","random","_ref","undefined","_this","find","data","setState","correctCar","filter","_this2","this","components_Wrapper","components_Top","map","components_Pictures","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2pEAoBeA,EAjBH,SAAAC,GAAK,OAEbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAuBH,EAAAC,EAAAC,cAAA,yCACvCF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAwBJ,EAAMK,SAC9CJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,UAA+CJ,EAAMM,OACrDL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,eAAoDJ,EAAMO,cCavDC,EAtBE,SAAAR,GAAK,OAElBC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,sBAEjBH,EAAAC,EAAAC,cAAA,KAAGM,QAAS,kBAAMT,EAAMU,UAAUV,EAAMW,OAAOC,IAAKZ,EAAMW,MACtDV,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAMc,MAAOF,IAAKZ,EAAMW,KAAMP,UAAY,kBCHjDW,EAFC,SAAAf,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMgB,kBCyE1CC,6MApEbC,MAAQ,CACNb,QAAS,4EACTc,KAAMA,EACNb,MAAO,EACPC,UAAW,EACXa,UAAWD,KAIbE,aAAe,SAAAC,GACb,IAAK,IAAIC,EAAID,EAAKE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACtC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADFM,EAEjB,CAACP,EAAKG,GAAIH,EAAKC,IAAnCD,EAAKC,GAFgCM,EAAA,GAE5BP,EAAKG,GAFuBI,EAAA,OAM5CnB,UAAY,SAAAC,GAEV,QAAiBmB,IADAC,EAAKb,MAAME,UAAUY,KAAK,SAAAC,GAAI,OAAIA,EAAKtB,OAASA,IAE/DoB,EAAKG,SAAS,CACZ7B,QAAS,YACTc,KAAMA,EACNb,MAAO,EACPC,UAAYwB,EAAKb,MAAMZ,MAAQyB,EAAKb,MAAMX,UAAYwB,EAAKb,MAAMZ,MAAQyB,EAAKb,MAAMX,UACpFa,UAAWD,QAGV,CACH,IAAMgB,EAAaJ,EAAKb,MAAME,UAAUgB,OAAO,SAAAH,GAAI,OAAIA,EAAKtB,OAASA,IACrEoB,EAAKG,SAAS,CACZ7B,QAAS,6BACTc,KAAMA,EACNb,MAAOyB,EAAKb,MAAMZ,MAAQ,EAC1Bc,UAAWe,IAGfJ,EAAKV,aAAaF,4EAOX,IAAAkB,EAAAC,KACP,OAEErC,EAAAC,EAAAC,cAACoC,EAAD,KACAtC,EAAAC,EAAAC,cAACqC,EAAD,CACAnC,QAASiC,KAAKpB,MAAMb,QACpBC,MAAOgC,KAAKpB,MAAMZ,MAClBC,UAAW+B,KAAKpB,MAAMX,YAGrB+B,KAAKpB,MAAMC,KAAKsB,IAAI,SAAAR,GAAI,OACvBhC,EAAAC,EAAAC,cAACuC,EAAD,CACEhC,UAAW2B,EAAK3B,UAChBC,KAAMsB,EAAKtB,KACXG,MAAOmB,EAAKnB,MACZF,IAAKqB,EAAKtB,iBA5DFgC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1e3dd041.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Top = props => (\r\n\r\n    <div className=\"navi\">\r\n\r\n        <nav className=\"navbar navbar-dark bg-danger fixed-top\">\r\n            <span className=\"navbar-brand mb-0 h1\"><strong>Automobile Clicky Game</strong></span>\r\n            <span className=\"navbar-brand mb-0 h1\">{props.message}</span>\r\n            <span className=\"navbar-brand mb-0 h1\">Score: {props.score}</span>\r\n            <span className=\"navbar-brand mb-0 h1\">High Score: {props.highscore}</span>\r\n        </nav>\r\n        {/* <h3><strong>{props.message}</strong></h3>\r\n        <p><strong>Score: </strong>{props.score}</p>\r\n        <p><strong>High Score: </strong>{props.highscore}</p> */}\r\n    </div>\r\n\r\n\r\n)\r\nexport default Top;","import React from \"react\";\r\n\r\nconst Pictures = props =>(\r\n\r\n    <div className = \"card mt-5\">\r\n        <div className = \"img-container grow\">\r\n\r\n        <a onClick={() => props.carPicker(props.name)} alt={props.name}>\r\n            <img src={props.image} alt={props.name} className = \"img-fluid\"></img>\r\n        </a>\r\n        \r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n);\r\n\r\n\r\n\r\nexport default Pictures;","import React from \"react\";\n\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React, { Component } from 'react';\nimport Top from './components/Top';\nimport Pictures from './components/Pictures';\nimport Wrapper from './components/Wrapper'\nimport cars from './cars.json';\n\nclass App extends Component {\n\n  state = {\n    message: \"Click any image to start the game, but DO NOT CLICK THE SAME IMAGE TWICE!\",\n    cars: cars,\n    score: 0,\n    highscore: 0,\n    notPicked: cars   \n  }\n\n\n  imageShuffle = item => {\n    for (let x = item.length - 1; x > 0; x--) {\n        let y = Math.floor(Math.random() * (x + 1));\n        [item[x], item[y]] = [item[y], item[x]];\n    }\n}\n\n  carPicker = name => {\n    const carCheck = this.state.notPicked.find(data => data.name === name);\n    if (carCheck === undefined){\n      this.setState({\n        message: \"Wrong!!!!\",\n        cars: cars,\n        score: 0,\n        highscore: (this.state.score > this.state.highscore ? this.state.score : this.state.highscore),\n        notPicked: cars\n      })\n    }\n    else {\n      const correctCar = this.state.notPicked.filter(data => data.name !== name);\n      this.setState({\n        message: \"Correct!!! Superb Memory!!\",\n        cars: cars,\n        score: this.state.score + 1,\n        notPicked: correctCar\n      });\n    }\n    this.imageShuffle(cars);\n  };\n\n\n\n\n\n  render() {\n    return (\n      \n      <Wrapper>\n      <Top \n      message={this.state.message}\n      score={this.state.score}\n      highscore={this.state.highscore}\n      />\n\n      {this.state.cars.map(data => (\n        <Pictures\n          carPicker={this.carPicker}\n          name={data.name}\n          image={data.image}\n          alt={data.name}\n        />\n      ))}\n      </Wrapper>\n     \n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}